

// wrapTestMethod applies the test server interceptor to endpoints.
func wrapMethodTest(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &TestInfo{
			Service:    "MultipleInterceptorsService",
			Method:     "Method",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Test(ctx, info, endpoint)
	}
}

// wrapTest3Method applies the test3 server interceptor to endpoints.
func wrapMethodTest3(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &Test3Info{
			Service:    "MultipleInterceptorsService",
			Method:     "Method",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Test3(ctx, info, endpoint)
	}
}

// wrapClientTest2Method applies the test2 client interceptor to endpoints.
func wrapClientMethodTest2(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &Test2Info{
			Service:    "MultipleInterceptorsService",
			Method:     "Method",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Test2(ctx, info, endpoint)
	}
}

// wrapClientTest4Method applies the test4 client interceptor to endpoints.
func wrapClientMethodTest4(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &Test4Info{
			Service:    "MultipleInterceptorsService",
			Method:     "Method",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Test4(ctx, info, endpoint)
	}
}

