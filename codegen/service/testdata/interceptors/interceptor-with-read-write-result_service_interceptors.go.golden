// ServerInterceptors defines the interface for all server-side interceptors.
// Server interceptors execute after the request is decoded and before the
// payload is sent to the service. The implementation is responsible for calling
// next to complete the request.
type ServerInterceptors interface {
	Caching(ctx context.Context, info *CachingInfo, next goa.Endpoint) (any, error)
}

// Access interfaces for interceptor payloads and results
type (
	// CachingInfo provides metadata about the current interception.
	// It includes service name, method name, and access to the endpoint.
	CachingInfo goa.InterceptorInfo

	// CachingResult provides type-safe access to the method result.
	// It allows reading and writing specific fields of the result as defined
	// in the design.
	CachingResult interface {
		Data() string
		SetData(string)
	}
)

// Private implementation types
type (
	cachingMethodResult struct {
		result *MethodResult
	}
)

// WrapMethodEndpoint wraps the Method endpoint with the server-side
// interceptors defined in the design.
func WrapMethodEndpoint(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	endpoint = wrapMethodcaching(endpoint, i)
	return endpoint
}

// Public accessor methods for Info types
// Result returns a type-safe accessor for the method result.
func (info *CachingInfo) Result(res any) CachingResult {
	return &cachingMethodResult{result: res.(*MethodResult)}
}

// Private implementation methods

func (r *cachingMethodResult) Data() string {
	return r.result.Data
}
func (r *cachingMethodResult) SetData(v string) {
	r.result.Data = v
}
