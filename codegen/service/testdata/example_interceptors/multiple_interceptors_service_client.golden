// Code generated by goa v3.19.1, DO NOT EDIT.
//
// MultipleInterceptorsService example client interceptors
//
// Command:
// goa

package interceptors

import (
	"context"
	"fmt"
	"goa.design/clue/log"
	goa "goa.design/goa/v3/pkg"
	multipleinterceptorsservice "multiple_interceptors_service"
)

// MultipleInterceptorsServiceClientInterceptors implements the client interceptors for the MultipleInterceptorsService service.
type MultipleInterceptorsServiceClientInterceptors struct {
}

// NewMultipleInterceptorsServiceClientInterceptors creates a new client interceptor for the MultipleInterceptorsService service.
func NewMultipleInterceptorsServiceClientInterceptors() *MultipleInterceptorsServiceClientInterceptors {
	return &MultipleInterceptorsServiceClientInterceptors{}
}
func (i *MultipleInterceptorsServiceClientInterceptors) Test2(ctx context.Context, info *interceptors.Test2Info, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Test2] Sending request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Test2] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Test2] Received response: %v", resp)
	return resp, nil
}
func (i *MultipleInterceptorsServiceClientInterceptors) Test4(ctx context.Context, info *interceptors.Test4Info, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Test4] Sending request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Test4] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Test4] Received response: %v", resp)
	return resp, nil
}
