// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ChainedInterceptorService example server interceptors
//
// Command:
// goa

package interceptors

import (
	chainedinterceptorservice "chained_interceptor_service"
	"context"
	"fmt"
	"goa.design/clue/log"
	goa "goa.design/goa/v3/pkg"
)

// ChainedInterceptorServiceServerInterceptors implements the server interceptor for the ChainedInterceptorService service.
type ChainedInterceptorServiceServerInterceptors struct {
}

// NewChainedInterceptorServiceServerInterceptors creates a new server interceptor for the ChainedInterceptorService service.
func NewChainedInterceptorServiceServerInterceptors() *ChainedInterceptorServiceServerInterceptors {
	return &ChainedInterceptorServiceServerInterceptors{}
}
func (i *ChainedInterceptorServiceServerInterceptors) API(ctx context.Context, info *interceptors.APIInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[API] Processing request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[API] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[API] Response: %v", resp)
	return resp, nil
}
func (i *ChainedInterceptorServiceServerInterceptors) Method(ctx context.Context, info *interceptors.MethodInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Method] Processing request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Method] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Method] Response: %v", resp)
	return resp, nil
}
func (i *ChainedInterceptorServiceServerInterceptors) Service(ctx context.Context, info *interceptors.ServiceInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Service] Processing request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Service] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Service] Response: %v", resp)
	return resp, nil
}
