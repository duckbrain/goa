// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ChainedInterceptorService example client interceptors
//
// Command:
// goa

package interceptors

import (
	chainedinterceptorservice "chained_interceptor_service"
	"context"
	"fmt"
	"goa.design/clue/log"
	goa "goa.design/goa/v3/pkg"
)

// ChainedInterceptorServiceClientInterceptors implements the client interceptors for the ChainedInterceptorService service.
type ChainedInterceptorServiceClientInterceptors struct {
}

// NewChainedInterceptorServiceClientInterceptors creates a new client interceptor for the ChainedInterceptorService service.
func NewChainedInterceptorServiceClientInterceptors() *ChainedInterceptorServiceClientInterceptors {
	return &ChainedInterceptorServiceClientInterceptors{}
}
func (i *ChainedInterceptorServiceClientInterceptors) API(ctx context.Context, info *interceptors.APIInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[API] Sending request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[API] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[API] Received response: %v", resp)
	return resp, nil
}
func (i *ChainedInterceptorServiceClientInterceptors) Method(ctx context.Context, info *interceptors.MethodInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Method] Sending request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Method] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Method] Received response: %v", resp)
	return resp, nil
}
func (i *ChainedInterceptorServiceClientInterceptors) Service(ctx context.Context, info *interceptors.ServiceInfo, next goa.Endpoint) (any, error) {
	log.Printf(ctx, "[Service] Sending request: %v", info.RawPayload)
	resp, err := next(ctx, info.RawPayload)
	if err != nil {
		log.Printf(ctx, "[Service] Error: %v", err)
		return nil, err
	}
	log.Printf(ctx, "[Service] Received response: %v", resp)
	return resp, nil
}
